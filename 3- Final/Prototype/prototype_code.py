# -*- coding: utf-8 -*-
"""Prototype code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17L6mJ8RTO80mhWUEIZ_VynINhEUpe0Mq
"""

import tkinter as tk
from tkinter import filedialog, Label, Button
from PIL import Image, ImageTk
import tensorflow as tf
import numpy as np
from tensorflow.keras import backend as K

@tf.keras.utils.register_keras_serializable()
def focal_loss(gamma=2., alpha=0.25):
    def focal_loss_fixed(y_true, y_pred):
        y_pred = tf.clip_by_value(y_pred, K.epsilon(), 1. - K.epsilon())
        cross_entropy = -y_true * K.log(y_pred)
        focal_factor = K.pow(1 - y_pred, gamma)
        loss = alpha * focal_factor * cross_entropy
        return K.sum(loss, axis=1)
    return focal_loss_fixed

class_labels = {
    0: "AD",  # Alzheimer's Disease
    1: "MCI", # Mild Cognitive Impairment
    2: "NC"   # Normal Cognition
}

MODEL_PATH = "C://Users//محمد عبدالفتاح//Desktop//Alzheimers-disease//3- Final//CNN code & Model//cnnModel.keras"
model = tf.keras.models.load_model(MODEL_PATH, custom_objects={'focal_loss': focal_loss, 'focal_loss_fixed': focal_loss()})

root = tk.Tk()
root.title("Image Classifier")
root.geometry("500x700")
root.configure(bg="#f0f0f5")

title_label = Label(root, text="Alzheimer's Image Classifier", font=("Helvetica", 20, "bold"), bg="#f0f0f5", fg="#2b2b52")
title_label.pack(pady=20)

label = Label(root, text="Upload an image to classify", font=("Helvetica", 14), bg="#f0f0f5", fg="#4d4d4d")
label.pack(pady=10)

image_path = None

def classify_image():
    global image_path
    if image_path:
        img = Image.open(image_path).resize((256, 256))
        img = img.convert('L')
        img_array = np.array(img) / 255.0
        img_array = np.expand_dims(img_array, axis=0)
        predictions = model.predict(img_array)
        class_idx = np.argmax(predictions[0])
        confidence = predictions[0][class_idx]
        class_name = class_labels.get(class_idx, "Unknown Class")
        result_label.config(text=f"Class: {class_name}\nConfidence: {confidence:.2f}", fg="#2b9348")
    else:
        result_label.config(text="Please upload an image first!", fg="#c1121f")

def upload_image():
    global image_path
    image_path = filedialog.askopenfilename(
        filetypes=[("Image Files", "*.png;*.jpg;*.jpeg;*.bmp")]
    )
    if image_path:
        img = Image.open(image_path)
        img.thumbnail((300, 300))
        img_tk = ImageTk.PhotoImage(img)
        image_label.config(image=img_tk)
        image_label.image = img_tk
        result_label.config(text="", fg="#4d4d4d")

upload_button = Button(
    root, text="Upload Image", command=upload_image,
    font=("Helvetica", 12, "bold"), bg="#5f6caf", fg="white", activebackground="#7a86b6", activeforeground="white"
)
upload_button.pack(pady=20)

image_label = Label(root, bg="#f0f0f5")
image_label.pack(pady=10)

classify_button = Button(
    root, text="Classify Image", command=classify_image,
    font=("Helvetica", 12, "bold"), bg="#5f6caf", fg="white", activebackground="#7a86b6", activeforeground="white"
)
classify_button.pack(pady=20)

result_label = Label(root, text="", font=("Helvetica", 14), bg="#f0f0f5", fg="#4d4d4d")
result_label.pack(pady=20)

root.mainloop()